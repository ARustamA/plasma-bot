const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');
const { Markup } = require('telegraf');

async function closeModalIfExists(page) {
  try {
    await page.waitForSelector('.donorform-modal', { timeout: 5000 });
    console.log('–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');

    const closeSelectors = [
      '.js-donorform-modal-close',
      '.close',
      '.donorform-modal-firsttime'
    ];

    for (const selector of closeSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible()) {
          await element.click();
          console.log(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑: ${selector}`);
          await page.waitForSelector('.donorform-modal', { state: 'hidden', timeout: 3000 });
          return true;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      }
    }

    await page.keyboard.press('Escape');
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ ESC');
    return true;
  } catch (error) {
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ');
    return false;
  }
}

async function bookAppointment(ctx, requestManualCaptchaFn) {
  let browser;
  let page;

  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏...');

    browser = await chromium.launch({ headless: false });
    page = await browser.newPage();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–ø–∏—Å–∏
    await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å
    await closeModalIfExists(page);
    await page.waitForTimeout(1000);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await fillFormData(page, ctx.session.donorData);

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π
    if (ctx.session.state === 'captcha_received' && ctx.session.manualCaptchaText) {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–ø—á—É: "${ctx.session.manualCaptchaText}"`);

      // –í–≤–æ–¥–∏–º –∫–∞–ø—á—É
      await page.fill('input[name="captcha"]', ctx.session.manualCaptchaText);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      await page.click('button[type="submit"]');

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      await page.waitForTimeout(3000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = await checkSubmissionResult(page, ctx);

      if (result.success) {
        // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å
        const date = new Date(ctx.session.selectedDate);
        const { getMonthName } = require('../utils/dates');
        const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

        await ctx.reply(
          `‚úÖ *–£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å!*\n\n` +
          `üìÖ –î–∞—Ç–∞: ${displayDate}\n` +
          `‚è∞ –í—Ä–µ–º—è: ${ctx.session.selectedTime}\n\n` +
          `üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n` +
          `üë§ ${ctx.session.donorData.name}\n` +
          `üìû ${ctx.session.donorData.phone}\n\n` +
          `üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ø–∞—Å–ø–æ—Ä—Ç –∏ –°–ù–ò–õ–°!`,
          { parse_mode: 'Markdown' }
        );

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏
        ctx.session.state = 'ready';
        delete ctx.session.manualCaptchaText;

      } else if (result.captchaError) {
        // –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–ø—á–∏
        await page.reload();
        await closeModalIfExists(page);
        await page.waitForTimeout(1000);
        await fillFormData(page, ctx.session.donorData);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
        await requestCaptchaFromUser(page, ctx, requestManualCaptchaFn);

      } else {
        // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        await ctx.reply(
          `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏*\n\n${result.errorMessage}\n\n` +
          `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ü–µ–Ω—Ç—Ä –Ω–∞–ø—Ä—è–º—É—é.`,
          {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
            ])
          }
        );
        ctx.session.state = 'ready';
        delete ctx.session.manualCaptchaText;
      }

    } else {
      // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–ø—á—É
      await requestCaptchaFromUser(page, ctx, requestManualCaptchaFn);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏:', error);
    await ctx.reply(
      '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏*\n\n' +
      'üîß –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n' +
      'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.',
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
        ])
      }
    );

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'ready';
    delete ctx.session.manualCaptchaText;

  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

async function requestCaptchaFromUser(page, ctx, requestManualCaptchaFn) {
  try {
    console.log('–ü–æ–ª—É—á–∞–µ–º –∫–∞–ø—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ø—á–∏
    await page.waitForSelector('.captcha_item img', { timeout: 10000 });

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏
    const captchaElement = await page.locator('.captcha_item img').first();
    const captchaImagePath = path.join(__dirname, '../temp', `captcha_${Date.now()}.png`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const tempDir = path.dirname(captchaImagePath);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ø—á–∏
    await captchaElement.screenshot({ path: captchaImagePath });

    console.log(`–ö–∞–ø—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${captchaImagePath}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await requestManualCaptchaFn(ctx, captchaImagePath);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    ctx.session.currentCaptchaPath = captchaImagePath;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—á–∏:', error);
    await ctx.reply(
      '‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ø—á—É*\n\n' +
      'üîß –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n' +
      'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
        ])
      }
    );
  }
}

async function checkSubmissionResult(page, ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
    const successSelectors = [
      '.success',
      '.alert-success',
      '.message-success',
      '[class*="success"]'
    ];

    const errorSelectors = [
      '.error',
      '.alert-error',
      '.message-error',
      '[class*="error"]'
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
    for (const selector of successSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible()) {
          const text = await element.textContent();
          console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ:', text);
          return { success: true };
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    for (const selector of errorSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible()) {
          const errorText = await element.textContent();
          console.log('–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞:', errorText);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –∫–∞–ø—á–µ–π
          const isCaptchaError = errorText.toLowerCase().includes('–∫–∞–ø—á–∞') ||
            errorText.toLowerCase().includes('captcha') ||
            errorText.toLowerCase().includes('–∫–æ–¥');

          return {
            success: false,
            captchaError: isCaptchaError,
            errorMessage: errorText
          };
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    const currentUrl = page.url();
    if (currentUrl.includes('success') || currentUrl.includes('thank')) {
      return { success: true };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ –∫–∞–ø—á–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏)
    try {
      const captchaStillExists = await page.locator('.captcha_item img').isVisible();
      if (captchaStillExists) {
        return {
          success: false,
          captchaError: true,
          errorMessage: '–§–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
        };
      }
    } catch (e) {
      // –ö–∞–ø—á–∞ –∏—Å—á–µ–∑–ª–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, —É—Å–ø–µ—Ö
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫
    return { success: true };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
    return {
      success: false,
      captchaError: false,
      errorMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏'
    };
  }
}

async function fillFormData(page, donorData) {
  try {
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await page.waitForSelector('input[name="name"]', { timeout: 10000 });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await page.fill('input[name="name"]', donorData.name);
    await page.fill('input[name="phone"]', donorData.phone);
    await page.fill('input[name="email"]', donorData.email);
    await page.fill('input[name="birth_date"]', donorData.birthDate);
    await page.fill('input[name="snils"]', donorData.snils);

    console.log('–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã:', error);
    throw error;
  }
}

module.exports = { bookAppointment };

