const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');
const { Markup } = require('telegraf');
const { normalizeBirthDate } = require('../handlers/userRegistration');
// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userBrowsers = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ - –ü–ï–†–ï–ú–ï–©–ê–ï–ú –í –ù–ê–ß–ê–õ–û
async function closeBrowserSafely(userId) {
  if (!userBrowsers.has(userId)) {
    return;
  }

  try {
    const browserData = userBrowsers.get(userId);
    if (browserData && browserData.browser) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
      if (browserData.browser.isConnected && browserData.browser.isConnected()) {
        await browserData.browser.close();
        console.log(`–ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç`);
      } else {
        console.log(`–ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç`);
      }
    }
  } catch (e) {
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e.message);
  } finally {
    userBrowsers.delete(userId);
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
function cleanupBrowsers() {
  if (userBrowsers.size === 0) {
    console.log('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è');
    return;
  }

  console.log(`–ó–∞–∫—Ä—ã–≤–∞–µ–º ${userBrowsers.size} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤...`);

  const cleanupPromises = [];

  for (const [userId, browserData] of userBrowsers) {
    const cleanupPromise = (async () => {
      try {
        if (browserData && browserData.browser) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
          if (browserData.browser.isConnected && browserData.browser.isConnected()) {
            await browserData.browser.close();
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–∫—Ä—ã—Ç`);
          } else {
            console.log(`‚ÑπÔ∏è –ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–∂–µ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω`);
          }
        }
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e.message);
      }
    })();

    cleanupPromises.push(cleanupPromise);
  }

  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
  Promise.allSettled(cleanupPromises).then(() => {
    userBrowsers.clear();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }).catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤:', error);
    userBrowsers.clear();
  });
}

async function closeModalIfExists(page) {
  try {
    await page.waitForSelector('.donorform-modal', { timeout: 5000 });
    console.log('–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');

    const closeSelectors = [
      '.js-donorform-modal-close',
      '.close',
      '.donorform-modal-firsttime'
    ];

    for (const selector of closeSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible()) {
          await element.click();
          console.log(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑: ${selector}`);
          await page.waitForSelector('.donorform-modal', { state: 'hidden', timeout: 3000 });
          return true;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      }
    }

    await page.keyboard.press('Escape');
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ ESC');
    return true;
  } catch (error) {
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ');
    return false;
  }
}

async function bookAppointment(ctx, requestManualCaptchaFn) {
  const userId = ctx.from.id;

  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏...');

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É
    if (ctx.session.state !== 'captcha_received') {
      console.log('–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É');

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
      await closeBrowserSafely(userId);

      const browser = await chromium.launch({ headless: false });
      const page = await browser.newPage();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –±—Ä–∞—É–∑–µ—Ä, –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      userBrowsers.set(userId, { browser, page });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–ø–∏—Å–∏
      await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å
      await closeModalIfExists(page);
      await page.waitForTimeout(1000);

      try {
        // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–∏
        await selectDateInCalendar(page, ctx.session.selectedDate);
        await selectTimeSlot(page, ctx.session.selectedTime);
      } catch (clickError) {
        console.log('–ö–ª–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥:', clickError.message);

        // –ï—Å–ª–∏ –∫–ª–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥
        await selectDateAndTimeDirectly(page, ctx.session.selectedDate, ctx.session.selectedTime);
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await fillFormData(page, ctx.session.donorData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.pageReady = true;

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–ø—á—É –∏ –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú–°–Ø - –∂–¥–µ–º –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await requestCaptchaFromUser(page, ctx, requestManualCaptchaFn);

      console.log('–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –∫–∞–ø—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ñ–¥–µ–º –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      // –ù–ï –ó–ê–ö–†–´–í–ê–ï–ú –ë–†–ê–£–ó–ï–† - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–º
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π
    if (ctx.session.state === 'captcha_received' && ctx.session.manualCaptchaText) {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞–ø—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${ctx.session.manualCaptchaText}"`);

      const browserData = userBrowsers.get(userId);
      if (!browserData) {
        throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.');
      }

      const { browser, page } = browserData;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã
      try {
        if (!browser.isConnected || !browser.isConnected()) {
          throw new Error('–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω');
        }
        await page.evaluate(() => document.title);
      } catch (e) {
        console.log('–ë—Ä–∞—É–∑–µ—Ä –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', e.message);
        await closeBrowserSafely(userId);
        throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.');
      }

      // –í–≤–æ–¥–∏–º –∫–∞–ø—á—É –≤ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É
      try {
        console.log('–í–≤–æ–¥–∏–º –∫–∞–ø—á—É –≤ –ø–æ–ª–µ...');
        await page.fill('#fc_field_captcha_id', ctx.session.manualCaptchaText);
        console.log('–ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–∞–ø—á–∏:', e);
        await closeBrowserSafely(userId);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∫–∞–ø—á—É. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.');
      }

      // –í–ê–ñ–ù–û: –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" –∏ –ù–ï –¥–µ–ª–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
      console.log('–ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"...');
      await submitForm(page);

      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ù–ï –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
      console.log('–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
      await page.waitForTimeout(5000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ù–ê –¢–û–ô –ñ–ï –°–¢–†–ê–ù–ò–¶–ï
      const result = await checkSubmissionResult(page, ctx);

      if (result.success) {
        // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å
        const date = new Date(ctx.session.selectedDate);
        const { getMonthName } = require('../utils/dates');
        const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

        await ctx.reply(
          `‚úÖ *–£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å!*\n\n` +
          `üìÖ –î–∞—Ç–∞: ${displayDate}\n` +
          `‚è∞ –í—Ä–µ–º—è: ${ctx.session.selectedTime}\n\n` +
          `üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n` +
          `üë§ ${ctx.session.donorData.name}\n` +
          `üìû ${ctx.session.donorData.phone}\n\n` +
          `üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ø–∞—Å–ø–æ—Ä—Ç –∏ –°–ù–ò–õ–°!`,
          { parse_mode: 'Markdown' }
        );

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        ctx.session.state = 'ready';
        delete ctx.session.manualCaptchaText;
        delete ctx.session.pageReady;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        await closeBrowserSafely(userId);

      } else if (result.captchaError) {
        // –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...');

        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...');

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–∞–ø—á—É
        delete ctx.session.manualCaptchaText;
        ctx.session.state = 'waiting_captcha_input';

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É —Å —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await requestCaptchaFromUser(page, ctx, requestManualCaptchaFn);

      } else {
        // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        await ctx.reply(
          `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏*\n\n${result.errorMessage}\n\n` +
          `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ü–µ–Ω—Ç—Ä –Ω–∞–ø—Ä—è–º—É—é.`,
          {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
            ])
          }
        );

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        ctx.session.state = 'ready';
        delete ctx.session.manualCaptchaText;
        delete ctx.session.pageReady;

        await closeBrowserSafely(userId);
      }
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏:', error);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
    await closeBrowserSafely(userId);

    await ctx.reply(
      '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏*\n\n' +
      'üîß –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n' +
      'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.',
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
        ])
      }
    );

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.state = 'ready';
    delete ctx.session.manualCaptchaText;
    delete ctx.session.pageReady;
  }
}



async function checkSubmissionResult(page, ctx) {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    await page.waitForTimeout(5000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞
    try {
      await page.evaluate(() => document.title);
    } catch (e) {
      console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      return {
        success: false,
        captchaError: false,
        errorMessage: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      };
    }

    // –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—â–µ–º div.uss_ok_form
    try {
      const successElement = await page.locator('.uss_ok_form').first();
      if (await successElement.isVisible({ timeout: 5000 })) {
        const successText = await successElement.textContent();
        console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ:', successText);

        if (successText.includes('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞') ||
          successText.includes('–ø–∏—Å—å–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')) {
          return { success: true };
        }
      }
    } catch (e) {
      console.log('–≠–ª–µ–º–µ–Ω—Ç .uss_ok_form –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL - –µ—Å–ª–∏ –µ—Å—Ç—å /send/, –∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
    const currentUrl = page.url();
    console.log('–¢–µ–∫—É—â–∏–π URL:', currentUrl);

    if (currentUrl.includes('/send/')) {
      console.log('URL —Å–æ–¥–µ—Ä–∂–∏—Ç /send/ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');

      const pageContent = await page.content();
      if (pageContent.includes('uss_ok_form') ||
        pageContent.includes('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞') ||
        pageContent.includes('–ø–∏—Å—å–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')) {
        console.log('–£—Å–ø–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã /send/');
        return { success: true };
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—Ö–∞
    if (currentUrl.includes('success') || currentUrl.includes('thank') || currentUrl.includes('—Å–ø–∞—Å–∏–±–æ')) {
      console.log('–£—Å–ø–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ URL');
      return { success: true };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
    const errorSelectors = [
      '.error',
      '.alert-error',
      '.message-error',
      '[class*="error"]',
      '.notification-error'
    ];

    for (const selector of errorSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible({ timeout: 2000 })) {
          const errorText = await element.textContent();
          console.log('–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞:', errorText);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –∫–∞–ø—á–µ–π
          const isCaptchaError = errorText.toLowerCase().includes('–∫–∞–ø—á–∞') ||
            errorText.toLowerCase().includes('captcha') ||
            errorText.toLowerCase().includes('–∫–æ–¥') ||
            errorText.toLowerCase().includes('–Ω–µ–≤–µ—Ä–Ω—ã–π');

          return {
            success: false,
            captchaError: isCaptchaError,
            errorMessage: errorText
          };
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ –∫–∞–ø—á–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏)
    try {
      const captchaStillExists = await page.locator('#fc_field_captcha_id').isVisible({ timeout: 2000 });
      const captchaValue = await page.locator('#fc_field_captcha_id').inputValue();

      if (captchaStillExists && captchaValue === '') {
        console.log('–ö–∞–ø—á–∞ –æ—á–∏—Å—Ç–∏–ª–∞—Å—å - –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –∫–∞–ø—á–∏');
        return {
          success: false,
          captchaError: true,
          errorMessage: '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞'
        };
      }

      if (captchaStillExists && captchaValue !== '') {
        console.log('–ö–∞–ø—á–∞ –æ—Å—Ç–∞–ª–∞—Å—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π - —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å');
        return {
          success: false,
          captchaError: false,
          errorMessage: '–§–æ—Ä–º–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
        };
      }
    } catch (e) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–ø—á–∏:', e.message);
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ —è–≤–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π');
    return {
      success: false,
      captchaError: false,
      errorMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
    return {
      success: false,
      captchaError: false,
      errorMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏'
    };
  }
}

async function selectDateAndTimeDirectly(page, dateString, timeString) {
  try {
    console.log(`–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∞—Ç–µ ${dateString} –∏ –≤—Ä–µ–º–µ–Ω–∏ ${timeString}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const baseUrl = 'https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/';
    const urlWithParams = `${baseUrl}?date=${dateString}&time=${timeString}`;

    console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ URL:', urlWithParams);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é
    await page.goto(urlWithParams);

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await page.waitForSelector('#fc_field_name_id', { timeout: 15000 });

    console.log('–§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ:', error);
    throw error;
  }
}

async function submitForm(page) {
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');

    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
    const submitSelectors = [
      'input[type="submit"][name="sendsave"]',
      'input[value="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"]',
      'input.submit.save.styler',
      'input[type="submit"]',
      'button[type="submit"]'
    ];

    let submitted = false;

    for (const selector of submitSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible({ timeout: 2000 })) {
          console.log(`–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${selector}`);
          await element.click();
          console.log(`–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑: ${selector}`);
          submitted = true;
          break;
        }
      } catch (e) {
        console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, e.message);
        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
      }
    }

    if (!submitted) {
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ JavaScript
      console.log('–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ JavaScript...');

      const jsSubmitted = await page.evaluate(() => {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        const submitButton =
          document.querySelector('input[name="sendsave"]') ||
          document.querySelector('input[value="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"]') ||
          document.querySelector('input.submit.save.styler') ||
          document.querySelector('input[type="submit"]') ||
          document.querySelector('button[type="submit"]');

        if (submitButton) {
          console.log('–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ JavaScript:', submitButton.outerHTML);
          submitButton.click();
          return true;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
        const form = document.querySelector('form');
        if (form) {
          console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ form.submit()');
          form.submit();
          return true;
        }

        return false;
      });

      if (jsSubmitted) {
        console.log('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript');
        submitted = true;
      }
    }

    if (!submitted) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
    }

    console.log('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞...');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
    throw error;
  }
}


async function selectDateInCalendar(page, dateString) {
  try {
    console.log(`–í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: ${dateString}`);

    await page.waitForSelector('.donorform-calendars', { timeout: 15000 });

    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.getMonth();
    const year = date.getFullYear();

    console.log(`–ò—â–µ–º –¥–∞—Ç—É: –¥–µ–Ω—å ${day}, –º–µ—Å—è—Ü ${month}, –≥–æ–¥ ${year}`);

    // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –∫ –Ω—É–∂–Ω–æ–º—É –º–µ—Å—è—Ü—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await navigateToMonthInBooking(page, month, year);
    await page.waitForTimeout(2000);

    // –£–ü–†–û–©–ï–ù–ù–´–ô –∫–ª–∏–∫ –ø–æ –¥–∞—Ç–µ - –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–µ–º, –Ω–µ –∂–¥–µ–º URL
    const dateClicked = await page.evaluate((dateParams) => {
      const { targetDay } = dateParams;

      const activeCalendar = document.querySelector('.slick-active .donorform-calendar');
      if (!activeCalendar) {
        console.log('–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      // –ò—â–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏)
      const dateCells = activeCalendar.querySelectorAll('.donorform-calendar__body td');

      for (const cell of dateCells) {
        const cellText = cell.textContent.trim();
        const cellDay = parseInt(cellText);

        if (cellDay === targetDay &&
          !cell.classList.contains('past') &&
          !cell.classList.contains('empty') &&
          !cell.classList.contains('busy') &&
          !cell.classList.contains('disabled')) {

          console.log(`–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ ${cellDay}, –∫–ª–∏–∫–∞–µ–º`);

          // –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏
          const link = cell.querySelector('a');
          if (link) {
            console.log('–ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏');
            link.click();
          } else {
            console.log('–ö–ª–∏–∫–∞–µ–º –ø–æ —Å–∞–º–æ–π —è—á–µ–π–∫–µ');
            cell.click();
          }

          return true;
        }
      }

      console.log(`–î–∞—Ç–∞ ${targetDay} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      return false;
    }, {
      targetDay: day
    });

    if (!dateClicked) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –¥–∞—Ç–µ ${day}.${month + 1}.${year}`);
    }

    console.log(`–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞, –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏...`);

    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞)
    await page.waitForSelector('.intervals-column', { timeout: 15000 });
    await page.waitForTimeout(3000);

    console.log('–í—Ä–µ–º—è –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã:', error);
    throw error;
  }
}


async function selectTimeSlot(page, timeString) {
  try {
    console.log(`–í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è: ${timeString}`);

    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    await page.waitForSelector('.intervals-column', { timeout: 15000 });
    await page.waitForTimeout(2000);

    // –£–ü–†–û–©–ï–ù–ù–´–ô –∫–ª–∏–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const timeSelected = await page.evaluate((params) => {
      const { targetTime } = params;

      console.log(`–ò—â–µ–º –≤—Ä–µ–º—è: ${targetTime}`);

      // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
      const timeElements = document.querySelectorAll(
        '.intervals-column-item a[data-value], .intervals-column-item a, a[data-value]'
      );

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${timeElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏`);

      for (const element of timeElements) {
        const dataValue = element.getAttribute('data-value');
        const elementText = element.textContent.trim();

        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º: data-value="${dataValue}", —Ç–µ–∫—Å—Ç="${elementText}"`);

        if (dataValue === targetTime || elementText.includes(targetTime)) {
          console.log(`–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è ${targetTime}, –∫–ª–∏–∫–∞–µ–º`);

          // –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–∫
          element.click();
          return true;
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ data-value, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É –≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
      const allElements = document.querySelectorAll('.intervals-column-item');
      for (const item of allElements) {
        if (item.textContent.includes(targetTime) && !item.classList.contains('busy')) {
          const link = item.querySelector('a');
          if (link) {
            console.log(`–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è ${targetTime} –≤ —ç–ª–µ–º–µ–Ω—Ç–µ, –∫–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ`);
            link.click();
            return true;
          }
        }
      }

      return false;
    }, { targetTime: timeString });

    if (!timeSelected) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: ${timeString}`);
    }

    console.log(`–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ, –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã...`);

    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã (–≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞)
    await page.waitForSelector('#fc_field_name_id', { timeout: 15000 });
    await page.waitForTimeout(2000);

    console.log('–§–æ—Ä–º–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏:', error);
    throw error;
  }
}



async function navigateToMonthInBooking(page, targetMonth, targetYear) {
  const maxAttempts = 5;

  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    try {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ${attempt + 1}/${maxAttempts} –∫ –º–µ—Å—è—Ü—É ${targetMonth + 1}/${targetYear}`);

      const currentMonthData = await page.evaluate(() => {
        const monthElement = document.querySelector('.slick-active .donorform-calendar__month');
        const yearElement = document.querySelector('.slick-active .donorform-calendar__year');

        if (!monthElement || !yearElement) {
          return null;
        }

        const monthText = monthElement.textContent.trim();
        const year = parseInt(yearElement.textContent.trim());

        const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
          '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
        const month = monthNames.indexOf(monthText);

        return { month, year };
      });

      if (!currentMonthData) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞');
        await page.waitForTimeout(1000);
        continue;
      }

      console.log(`–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: ${currentMonthData.month + 1}/${currentMonthData.year}`);

      if (currentMonthData.month === targetMonth && currentMonthData.year === targetYear) {
        console.log('–£–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–º –º–µ—Å—è—Ü–µ');
        return true;
      }

      const currentDate = new Date(currentMonthData.year, currentMonthData.month);
      const targetDate = new Date(targetYear, targetMonth);

      if (targetDate > currentDate) {
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü');

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "—Å–ª–µ–¥—É—é—â–∏–π"
        const nextSelectors = [
          '.slick-next:not(.slick-disabled)',
          '.slick-arrow.slick-next:not(.slick-disabled)',
          '.donorform-calendars .slick-next'
        ];

        let clicked = false;
        for (const selector of nextSelectors) {
          try {
            await page.click(selector, { timeout: 3000 });
            clicked = true;
            break;
          } catch (e) {
            console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
          }
        }

        if (!clicked) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É "—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"');
          break;
        }

      } else {
        console
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü');

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ø—Ä–µ–¥—ã–¥—É—â–∏–π"
        const prevSelectors = [
          '.slick-prev:not(.slick-disabled)',
          '.slick-arrow.slick-prev:not(.slick-disabled)',
          '.donorform-calendars .slick-prev'
        ];

        let clicked = false;
        for (const selector of prevSelectors) {
          try {
            await page.click(selector, { timeout: 3000 });
            clicked = true;
            break;
          } catch (e) {
            console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
          }
        }

        if (!clicked) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É "–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"');
          break;
        }
      }

      // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      await page.waitForTimeout(2000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é:', error);
      break;
    }
  }

  console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º–µ—Å—è—Ü ${targetMonth + 1}/${targetYear} –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  return false;
}

async function fillFormData(page, donorData) {
  try {
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    console.log('–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:', donorData.birthDate);

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await page.waitForSelector('#fc_field_name_id', { timeout: 15000 });
    await page.waitForTimeout(2000);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è...');
    await page.click('#fc_field_name_id');
    await page.fill('#fc_field_name_id', '');
    await page.type('#fc_field_name_id', donorData.name, { delay: 100 });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω...');
    const phoneDigits = donorData.phone.replace(/\D/g, '');
    const phoneForForm = phoneDigits.startsWith('7') ? phoneDigits.substring(1) : phoneDigits;

    await page.click('#fc_field_phone_id');
    await page.fill('#fc_field_phone_id', '');
    await page.type('#fc_field_phone_id', phoneForForm, { delay: 100 });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º email
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º email...');
    await page.click('#fc_field_email_id');
    await page.fill('#fc_field_email_id', '');
    await page.type('#fc_field_email_id', donorData.email, { delay: 100 });

    const normalizedBirthDate = normalizeBirthDate(donorData.birthDate) || ensureDateFormat(donorData.birthDate);
    console.log('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:', normalizedBirthDate);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if (!normalizedBirthDate.match(/^\d{2}\.\d{2}\.\d{4}$/)) {
      throw new Error(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: ${normalizedBirthDate}. –û–∂–∏–¥–∞–µ—Ç—Å—è DD.MM.YYYY`);
    }

    let birthDateFilled = await fillBirthDateSimple(page, normalizedBirthDate);

    if (!birthDateFilled) {
      console.log('–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JavaScript...');
      birthDateFilled = await fillBirthDateViaJS(page, normalizedBirthDate);
    }

    if (!birthDateFilled) {
      console.log('–ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ page.fill...');
      await page.click('#fc_field_birth_date_id');
      await page.fill('#fc_field_birth_date_id', normalizedBirthDate);
      await page.keyboard.press('Tab');
      await page.waitForTimeout(500);

      const finalValue = await page.inputValue('#fc_field_birth_date_id');
      birthDateFilled = finalValue === normalizedBirthDate;
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –°–ù–ò–õ–°
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º –°–ù–ò–õ–°...');
    await page.click('#fc_field_snils_id');
    await page.fill('#fc_field_snils_id', '');
    await page.type('#fc_field_snils_id', donorData.snils, { delay: 100 });

    console.log('–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const fieldValues = await page.evaluate(() => {
      return {
        name: document.querySelector('#fc_field_name_id')?.value || '',
        phone: document.querySelector('#fc_field_phone_id')?.value || '',
        email: document.querySelector('#fc_field_email_id')?.value || '',
        birthDate: document.querySelector('#fc_field_birth_date_id')?.value || '',
        snils: document.querySelector('#fc_field_snils_id')?.value || ''
      };
    });

    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:', fieldValues);

    if (!fieldValues.birthDate) {
      console.error('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∞—Å—å!');
      await page.screenshot({ path: `birth_date_error_${Date.now()}.png` });
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è');
    }

    console.log('–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã:', error);
    throw error;
  }
}



async function fillBirthDateSimple(page, birthDate) {
  try {
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º:', birthDate);

    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ–ª–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    await page.click('#fc_field_birth_date_id');
    await page.waitForTimeout(300);

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
    await page.keyboard.press('Control+A');
    await page.keyboard.press('Delete');
    await page.waitForTimeout(200);

    // –ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏–º –¥–∞—Ç—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
    await page.type('#fc_field_birth_date_id', birthDate, { delay: 100 });

    // –ù–∞–∂–∏–º–∞–µ–º Tab –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–∞
    await page.keyboard.press('Tab');
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const finalValue = await page.inputValue('#fc_field_birth_date_id');
    console.log('–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞:', finalValue);

    return finalValue === birthDate;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã:', error);
    return false;
  }
}
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ donor-form.js
function ensureDateFormat(dateString) {
  if (!dateString) return '';

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
  if (dateString.match(/^\d{2}\.\d{2}\.\d{4}$/)) {
    return dateString;
  }

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (ISO)
  const isoMatch = dateString.match(/^(\d{4})-(\d{2})-(\d{2})$/);
  if (isoMatch) {
    const [_, year, month, day] = isoMatch;
    return `${day}.${month}.${year}`;
  }

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY/MM/DD
  const slashMatch = dateString.match(/^(\d{4})\/(\d{2})\/(\d{2})$/);
  if (slashMatch) {
    const [_, year, month, day] = slashMatch;
    return `${day}.${month}.${year}`;
  }

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å
  const date = new Date(dateString);
  if (!isNaN(date.getTime())) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
  }

  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É:', dateString);
  return dateString; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
}


async function requestCaptchaFromUser(page, ctx, requestManualCaptchaFn) {
  try {
    console.log('–ü–æ–ª—É—á–∞–µ–º –∫–∞–ø—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ø—á–∏
    await page.waitForSelector('.captcha_item img', { timeout: 10000 });

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏
    const captchaElement = await page.locator('.captcha_item img').first();
    const captchaImagePath = path.join(__dirname, '../temp', `captcha_${Date.now()}.png`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const tempDir = path.dirname(captchaImagePath);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ø—á–∏
    await captchaElement.screenshot({ path: captchaImagePath });

    console.log(`–ö–∞–ø—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${captchaImagePath}`);

    // –í–ê–ñ–ù–û: –ù–ï –¥–µ–ª–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await requestManualCaptchaFn(ctx, captchaImagePath);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    ctx.session.currentCaptchaPath = captchaImagePath;

    console.log('–ö–∞–ø—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∂–¥–µ–º –≤–≤–æ–¥–∞...');
    // –ù–ï –¥–µ–ª–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—á–∏:', error);
    await ctx.reply(
      '‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ø—á—É*\n\n' +
      'üîß –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n' +
      'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
        ])
      }
    );
  }
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  cleanupBrowsers();
  setTimeout(() => {
    process.exit(0);
  }, 3000); // –î–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  cleanupBrowsers();
  setTimeout(() => {
    process.exit(0);
  }, 3000);
});

process.on('exit', () => {
  console.log('üëã –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  cleanupBrowsers();
  setTimeout(() => {
    process.exit(1);
  }, 3000);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  cleanupBrowsers();
});

module.exports = {
  bookAppointment,
  userBrowsers,
  closeBrowserSafely,
  cleanupBrowsers
};
