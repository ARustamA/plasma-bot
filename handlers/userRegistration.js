const { Markup } = require('telegraf');
const { canDonatePlasma } = require('../utils/dates');
const { checkAvailability, checkAvailabilityFromDate } = require('./booking');

async function startUserRegistration(ctx) {
  ctx.session.state = 'ask_donation_type';
  await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:');
  await ctx.reply('–í—ã —Å–¥–∞–≤–∞–ª–∏ –∫—Ä–æ–≤—å –∏–ª–∏ –ø–ª–∞–∑–º—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑?',
    Markup.inlineKeyboard([
      [Markup.button.callback('ü©∏ –ö—Ä–æ–≤—å', 'donation_type_blood')],
      [Markup.button.callback('üü° –ü–ª–∞–∑–º—É', 'donation_type_plasma')]
    ])
  );
}

async function handleDonationType(ctx, donationType) {
  ctx.session.donationType = donationType;
  ctx.session.state = 'ask_last_donation_date';

  const typeText = donationType === 'blood' ? '–∫—Ä–æ–≤—å' : '–ø–ª–∞–∑–º—É';
  await ctx.editMessageText(
    `‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${typeText}\n\n` +
    `üìÖ –ö–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–∞—á–∞?\n\n` +
    `üí° –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n` +
    `–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024`
  );
}

async function handleLastDonationDate(ctx, text) {
  const match = text.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
  if (match) {
    const [_, day, month, year] = match;
    const dateStr = `${year}-${month}-${day}`;
    const date = new Date(dateStr);

    if (!isNaN(date.getTime())) {
      ctx.session.lastDonationDate = dateStr;
      ctx.session.state = 'ask_name';
      await ctx.reply('‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
    } else {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
    }
  } else {
    await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024');
  }
}

async function handleName(ctx, text) {
  ctx.session.donorData = ctx.session.donorData || {};
  ctx.session.donorData.name = text;
  ctx.session.state = 'ask_phone';
  await ctx.reply('‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
}

async function handlePhone(ctx, text) {
  ctx.session.donorData.phone = text;
  ctx.session.state = 'ask_email';
  await ctx.reply('‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
}

async function handleEmail(ctx, text) {
  ctx.session.donorData.email = text;
  ctx.session.state = 'ask_birth_date';
  await ctx.reply('‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):');
}

async function handleBirthDate(ctx, text) {
  const match = text.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
  if (match) {
    const [_, day, month, year] = match;
    ctx.session.donorData.birthDate = `${year}-${month}-${day}`;
    ctx.session.state = 'ask_snils';
    await ctx.reply('‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ù–ò–õ–°:');
  } else {
    await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –î–î.–ú–ú.–ì–ì–ì–ì');
  }
}

async function handleSnils(ctx, text) {
  ctx.session.donorData.snils = text;
  ctx.session.state = 'ready';

  const nextPossibleDate = new Date(ctx.session.lastDonationDate);
  if (ctx.session.donationType === 'blood') {
    nextPossibleDate.setDate(nextPossibleDate.getDate() + 30);
  } else {
    nextPossibleDate.setDate(nextPossibleDate.getDate() + 14);
  }

  await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:
üë§ –§–ò–û: ${ctx.session.donorData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.donorData.phone}
üìß Email: ${ctx.session.donorData.email}

ü©∏ –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Å–¥–∞–≤–∞—Ç—å –ø–ª–∞–∑–º—É –ø–æ—Å–ª–µ ${nextPossibleDate.toLocaleDateString()}.
üîç –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å!`);

  await checkAvailability(ctx);
}

async function handleUserDataInput(ctx, text, state) {
  switch (state) {
    case 'ask_last_donation_date':
      await handleLastDonationDate(ctx, text);
      break;
    case 'ask_name':
      await handleName(ctx, text);
      break;
    case 'ask_phone':
      await handlePhone(ctx, text);
      break;
    case 'ask_email':
      await handleEmail(ctx, text);
      break;
    case 'ask_birth_date':
      await handleBirthDate(ctx, text);
      break;
    case 'ask_snils':
      await handleSnils(ctx, text);
      break;
    default:
      await ctx.reply('‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ.');
  }
}

async function handleWaitingPeriod(ctx) {
  const lastDate = new Date(ctx.session.lastDonationDate);
  const waitDays = ctx.session.donationType === 'blood' ? 30 : 14;
  const nextPossibleDate = new Date(lastDate.getTime() + waitDays * 24 * 60 * 60 * 1000);

  await ctx.reply(
    `‚è≥ *–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è*\n\n` +
    `üìÖ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞–∑–º—É –Ω–µ —Ä–∞–Ω—å—à–µ ${nextPossibleDate.toLocaleDateString()}\n\n` +
    `üîç –Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞.`,
    { parse_mode: 'Markdown' }
  );

  try {
    await checkAvailabilityFromDate(ctx, nextPossibleDate);
  } catch (checkError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—â–∏—Ö –¥–∞—Ç:', checkError);
    await ctx.reply('üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã. –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
  }
}

module.exports = {
  startUserRegistration,
  handleDonationType,
  handleUserDataInput,
  handleWaitingPeriod
};
