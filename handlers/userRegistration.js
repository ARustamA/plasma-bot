const { Markup } = require('telegraf');
const { canDonatePlasma } = require('../utils/dates');
const { checkAvailability, checkAvailabilityFromDate } = require('./booking');

async function startUserRegistration(ctx) {
  ctx.session.state = 'ask_donation_type';
  await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:');
  await ctx.reply('–í—ã —Å–¥–∞–≤–∞–ª–∏ –∫—Ä–æ–≤—å –∏–ª–∏ –ø–ª–∞–∑–º—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑?',
    Markup.inlineKeyboard([
      [Markup.button.callback('ü©∏ –ö—Ä–æ–≤—å', 'donation_type_blood')],
      [Markup.button.callback('üü° –ü–ª–∞–∑–º—É', 'donation_type_plasma')]
    ])
  );
}

async function handleDonationType(ctx, donationType) {
  ctx.session.donationType = donationType;
  ctx.session.state = 'ask_last_donation_date';

  const typeText = donationType === 'blood' ? '–∫—Ä–æ–≤—å' : '–ø–ª–∞–∑–º—É';
  await ctx.editMessageText(
    `‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${typeText}\n\n` +
    `üìÖ –ö–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–∞—á–∞?\n\n` +
    `üí° –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n` +
    `–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024`
  );
}

async function handleLastDonationDate(ctx, text) {
  const match = text.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
  if (match) {
    const [_, day, month, year] = match;
    const dateStr = `${year}-${month}-${day}`;
    const date = new Date(dateStr);

    if (!isNaN(date.getTime())) {
      ctx.session.lastDonationDate = dateStr;
      ctx.session.state = 'ask_name';
      await ctx.reply('‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
    } else {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
    }
  } else {
    await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024');
  }
}

async function handleName(ctx, text) {
  ctx.session.donorData = ctx.session.donorData || {};
  ctx.session.donorData.name = text;
  ctx.session.state = 'ask_phone';
  await ctx.reply('‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
}

async function handlePhone(ctx, text) {
  const digits = text.replace(/\D/g, '');

  if (digits.length < 10) {
    await ctx.reply('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    return;
  }

  if (digits.length > 11) {
    await ctx.reply('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:');
    return;
  }

  const normalizedPhone = normalizePhoneNumber(text);
  ctx.session.donorData.phone = normalizedPhone;
  ctx.session.state = 'ask_email';

  await ctx.reply(`‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${normalizedPhone}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:`);
}

function normalizePhoneNumber(phone) {
  let digits = phone.replace(/\D/g, '');

  if (digits.startsWith('8')) {
    digits = '7' + digits.substring(1);
  }

  if (digits.startsWith('7') && digits.length === 11) {
    digits = digits.substring(1);
  }

  if (!digits.startsWith('9') && digits.length === 10) {
    digits = '7' + digits;
  }

  if (digits.length === 10 && digits.startsWith('9')) {
    return `+7 (${digits.substring(0, 3)}) ${digits.substring(3, 6)}-${digits.substring(6, 8)}-${digits.substring(8, 10)}`;
  }

  if (digits.length === 11 && digits.startsWith('7')) {
    return `+7 (${digits.substring(1, 4)}) ${digits.substring(4, 7)}-${digits.substring(7, 9)}-${digits.substring(9, 11)}`;
  }

  return phone;
}

async function handleEmail(ctx, text) {
  ctx.session.donorData.email = text;
  ctx.session.state = 'ask_birth_date';
  await ctx.reply('‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):');
}

async function handleBirthDate(ctx, text) {
  const normalizedDate = normalizeBirthDate(text);

  if (normalizedDate) {
    const [day, month, year] = normalizedDate.split('.');
    const birthDate = new Date(year, month - 1, day);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();

    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }

    if (age < 18) {
      await ctx.reply('‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
      return;
    }

    if (age > 100) {
      await ctx.reply('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
      return;
    }

    if (!ctx.session.donorData) {
      ctx.session.donorData = {};
    }

    ctx.session.donorData.birthDate = normalizedDate;
    ctx.session.state = 'ask_snils';

    await ctx.reply(`‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${normalizedDate}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ù–ò–õ–°:`);
  } else {
    await ctx.reply(
      '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n' +
      'üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: 27.07.1992\n\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
    );
  }
}

function normalizeBirthDate(date) {
  const digits = date.replace(/\D/g, '');

  if (digits.length === 8) {
    const day = digits.substring(0, 2);
    const month = digits.substring(2, 4);
    const year = digits.substring(4, 8);

    const dateObj = new Date(year, month - 1, day);
    if (dateObj.getFullYear() == year &&
      dateObj.getMonth() == month - 1 &&
      dateObj.getDate() == day) {
      return `${day}.${month}.${year}`;
    }
  }

  const formats = [
    /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/,
    /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/,
    /^(\d{1,2})-(\d{1,2})-(\d{4})$/
  ];

  for (const format of formats) {
    const match = date.match(format);
    if (match) {
      const day = match[1].padStart(2, '0');
      const month = match[2].padStart(2, '0');
      const year = match[3];

      const dateObj = new Date(year, month - 1, day);
      if (dateObj.getFullYear() == year &&
        dateObj.getMonth() == month - 1 &&
        dateObj.getDate() == day) {
        return `${day}.${month}.${year}`;
      }
    }
  }

  return '';
}

async function handleSnils(ctx, text) {
  ctx.session.donorData.snils = text;
  ctx.session.state = 'ready';

  const nextPossibleDate = new Date(ctx.session.lastDonationDate);
  if (ctx.session.donationType === 'blood') {
    nextPossibleDate.setDate(nextPossibleDate.getDate() + 30);
  } else {
    nextPossibleDate.setDate(nextPossibleDate.getDate() + 14);
  }

  await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:
üë§ –§–ò–û: ${ctx.session.donorData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.donorData.phone}
üìß Email: ${ctx.session.donorData.email}

ü©∏ –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Å–¥–∞–≤–∞—Ç—å –ø–ª–∞–∑–º—É –ø–æ—Å–ª–µ ${nextPossibleDate.toLocaleDateString()}.
üîç –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å!`);

  await checkAvailability(ctx);
}

async function handleUserDataInput(ctx, text, state) {
  switch (state) {
    case 'ask_last_donation_date':
      await handleLastDonationDate(ctx, text);
      break;
    case 'ask_name':
      await handleName(ctx, text);
      break;
    case 'ask_phone':
      await handlePhone(ctx, text);
      break;
    case 'ask_email':
      await handleEmail(ctx, text);
      break;
    case 'ask_birth_date':
      await handleBirthDate(ctx, text);
      break;
    case 'ask_snils':
      await handleSnils(ctx, text);
      break;
    default:
      await ctx.reply('‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ.');
  }
}

async function handleWaitingPeriod(ctx) {
  const lastDate = new Date(ctx.session.lastDonationDate);
  const waitDays = ctx.session.donationType === 'blood' ? 30 : 14;
  const nextPossibleDate = new Date(lastDate.getTime() + waitDays * 24 * 60 * 60 * 1000);

  await ctx.reply(
    `‚è≥ *–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è*\n\n` +
    `üìÖ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞–∑–º—É –Ω–µ —Ä–∞–Ω—å—à–µ ${nextPossibleDate.toLocaleDateString()}\n\n` +
    `üîç –Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞.`,
    { parse_mode: 'Markdown' }
  );

  try {
    await checkAvailabilityFromDate(ctx, nextPossibleDate);
  } catch (checkError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—â–∏—Ö –¥–∞—Ç:', checkError);
    await ctx.reply('üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã. –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
  }
}

module.exports = {
  startUserRegistration,
  handleDonationType,
  handleUserDataInput,
  handleWaitingPeriod,
  normalizeBirthDate
};