const { canDonatePlasma } = require('../utils/dates');
const { checkAvailability } = require('./booking');
const { startUserRegistration, handleWaitingPeriod } = require('./userRegistration');

async function handleStartCommand(ctx, startPeriodicCheck) {
  try {
    console.log('–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞');

    if (!ctx.session) {
      ctx.session = {};
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!ctx.session.lastDonationDate || !ctx.session.donationType) {
      await startUserRegistration(ctx);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–∞—á–∏
    const canDonate = canDonatePlasma(ctx.session.lastDonationDate, ctx.session.donationType);

    if (!canDonate) {
      if (ctx.session.checkingEnabled !== false) {
        ctx.session.checkingEnabled = true;
        startPeriodicCheck();
      }
      await handleWaitingPeriod(ctx);
      return;
    }

    // –í–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (ctx.session.checkingEnabled !== false) {
      ctx.session.checkingEnabled = true;
      startPeriodicCheck();
    }

    try {
      await checkAvailability(ctx);
    } catch (checkError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', checkError);
      await ctx.reply('üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã. –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

function handleStartCheckCommand(ctx, startPeriodicCheck) {
  if (!ctx.session.checkingEnabled) {
    ctx.session.checkingEnabled = true;
    startPeriodicCheck();
    ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞.');
  } else {
    ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
  }
}

function handleStopCheckCommand(ctx, stopPeriodicCheck) {
  if (stopPeriodicCheck) {
    stopPeriodicCheck();
  }
  ctx.session.checkingEnabled = false;
  ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
}

function handleStatusCommand(ctx) {
  const status = ctx.session.checkingEnabled !== false ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
  ctx.reply(`–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${status}.`);
}

async function handleTestBookingCommand(ctx) {
  if (!ctx.session.donorData || !ctx.session.lastDonationDate) {
    await ctx.reply(
      '‚ùå *–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è*\n\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      { parse_mode: 'Markdown' }
    );
    return;
  }

  ctx.session.testMode = true; // –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º

  await ctx.reply(
    'üß™ *–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏*\n\n' +
    'üìù –°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–π–¥–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏, –Ω–æ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö ' +
    '—è –ø–æ–∫–∞–∂—É –≤–∞–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n' +
    'üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:',
    { parse_mode: 'Markdown' }
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç
  const { checkAvailability } = require('./booking');
  await checkAvailability(ctx);
}


module.exports = {
  handleStartCommand,
  handleStartCheckCommand,
  handleStopCheckCommand,
  handleStatusCommand,
  handleTestBookingCommand
};
