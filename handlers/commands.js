const { canDonatePlasma } = require('../utils/dates');
const { checkAvailability } = require('./booking');
const { startUserRegistration, handleWaitingPeriod } = require('./userRegistration');

async function handleStartCommand(ctx, startPeriodicCheck) {
  try {
    console.log('–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    if (!ctx.session) {
      ctx.session = {};
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!ctx.session.lastDonationDate || !ctx.session.donationType) {
      await startUserRegistration(ctx);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–∞—á–∏
    const canDonate = canDonatePlasma(ctx.session.lastDonationDate, ctx.session.donationType);

    if (!canDonate) {
      // –í–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      if (ctx.session.checkingEnabled !== false) {
        ctx.session.checkingEnabled = true;
        startPeriodicCheck();
      }
      await handleWaitingPeriod(ctx);
      return;
    }

    // –í–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (ctx.session.checkingEnabled !== false) {
      ctx.session.checkingEnabled = true;
      startPeriodicCheck();
    }

    try {
      await checkAvailability(ctx);
    } catch (checkError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', checkError);
      await ctx.reply('üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã. –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

function handleStartCheckCommand(ctx, startPeriodicCheck) {
  if (!ctx.session.checkingEnabled) {
    ctx.session.checkingEnabled = true;
    startPeriodicCheck();
    ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞.');
  } else {
    ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
  }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä stopPeriodicCheck
function handleStopCheckCommand(ctx, stopPeriodicCheck) {
  if (stopPeriodicCheck) {
    stopPeriodicCheck();
  }
  ctx.session.checkingEnabled = false;
  ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
}

function handleStatusCommand(ctx) {
  const status = ctx.session.checkingEnabled !== false ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
  ctx.reply(`–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${status}.`);
}

module.exports = {
  handleStartCommand,
  handleStartCheckCommand,
  handleStopCheckCommand,
  handleStatusCommand
};
