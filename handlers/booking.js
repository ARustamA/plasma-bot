const { checkAvailabilityInternal, checkAvailabilityFromDateInternal, getMonthName } = require('../utils/dates');
const { Markup } = require('telegraf');

async function checkAvailability(ctx) {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç...');

    const availableDates = await checkAvailabilityInternal();

    if (availableDates && availableDates.length > 0) {
      console.log('–ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:', availableDates);

      const dateButtons = availableDates.map(dateData => [
        {
          text: dateData.displayText,
          callback_data: `select_date_${dateData.dateString}`
        }
      ]);

      dateButtons.push([
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'refresh_dates' }
      ]);

      await ctx.reply('üéâ –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:', {
        reply_markup: { inline_keyboard: dateButtons }
      });
    } else {
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      await ctx.reply(
        'üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. –Ø –ø—Ä–æ–¥–æ–ª–∂—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å...',
        {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'refresh_dates' }
            ]]
          }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);

    if (error.message.includes('net::ERR_EMPTY_RESPONSE') ||
      error.message.includes('ERR_CONNECTION_REFUSED')) {
      await ctx.reply('üåê –°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–∑–∂–µ...');
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–∑–∂–µ...');
    }
  }
}

async function checkAvailabilityFromDate(ctx, startDate) {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç –Ω–∞—á–∏–Ω–∞—è —Å:', startDate.toLocaleDateString());

    const availableDates = await checkAvailabilityFromDateInternal(startDate);

    if (availableDates && availableDates.length > 0) {
      console.log('–ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:', availableDates);

      const dateButtons = availableDates.map(dateData => [
        {
          text: dateData.displayText,
          callback_data: `select_date_${dateData.dateString}`
        }
      ]);

      dateButtons.push([
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'refresh_dates' }
      ]);

      await ctx.reply('üéâ –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:', {
        reply_markup: { inline_keyboard: dateButtons }
      });
    } else {
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      await ctx.reply(
        'üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.\n\n' +
        'üîç –Ø –ø—Ä–æ–¥–æ–ª–∂—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞.',
        {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'refresh_dates' }
            ]]
          }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã:', error);

    if (error.message.includes('net::ERR_EMPTY_RESPONSE') ||
      error.message.includes('ERR_CONNECTION_REFUSED') ||
      error.message.includes('has been closed')) {
      await ctx.reply('üåê –°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–∑–∂–µ...');
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–∑–∂–µ...');
    }
  }
}

async function startBooking(ctx) {
  try {
    const selectedDate = ctx.session.selectedDate;
    const date = new Date(selectedDate);
    const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

    await ctx.reply(`üîç –ò—â—É –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è ${displayDate}...`);

    const availableTimes = await getAvailableTimesForDate(selectedDate);

    if (availableTimes.length > 0) {
      const timeGroups = {
        morning: availableTimes.filter(time => {
          const hour = parseInt(time.split(':')[0]);
          return hour >= 8 && hour < 12;
        }),
        afternoon: availableTimes.filter(time => {
          const hour = parseInt(time.split(':')[0]);
          return hour >= 12 && hour < 17;
        }),
        evening: availableTimes.filter(time => {
          const hour = parseInt(time.split(':')[0]);
          return hour >= 17 && hour < 20;
        })
      };

      const timeButtons = [];

      if (timeGroups.morning.length > 0) {
        timeButtons.push([{ text: 'üåÖ –£—Ç—Ä–æ (8:00-12:00)', callback_data: 'time_period_morning' }]);
        timeGroups.morning.forEach(time => {
          timeButtons.push([{ text: `‚è∞ ${time}`, callback_data: `select_time_${time}` }]);
        });
      }

      if (timeGroups.afternoon.length > 0) {
        timeButtons.push([{ text: '‚òÄÔ∏è –î–µ–Ω—å (12:00-17:00)', callback_data: 'time_period_afternoon' }]);
        timeGroups.afternoon.forEach(time => {
          timeButtons.push([{ text: `‚è∞ ${time}`, callback_data: `select_time_${time}` }]);
        });
      }

      if (timeGroups.evening.length > 0) {
        timeButtons.push([{ text: 'üåÜ –í–µ—á–µ—Ä (17:00-20:00)', callback_data: 'time_period_evening' }]);
        timeGroups.evening.forEach(time => {
          timeButtons.push([{ text: `‚è∞ ${time}`, callback_data: `select_time_${time}` }]);
        });
      }

      timeButtons.push([
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data: `refresh_times_${selectedDate}` },
        { text: 'üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', callback_data: 'back_to_dates' }
      ]);

      await ctx.reply(`üìÖ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ ${displayDate}:`, {
        reply_markup: { inline_keyboard: timeButtons }
      });
    } else {
      await ctx.reply(
        `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ ${displayDate} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data: `refresh_times_${selectedDate}` },
                { text: 'üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', callback_data: 'back_to_dates' }
              ]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ startBooking:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function getAvailableTimesForDate(dateString) {
  const { chromium } = require('playwright');
  let browser;

  try {
    browser = await chromium.launch({ headless: true });
    const page = await browser.newPage();

    await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    await closeModalIfExists(page);
    await page.waitForTimeout(1000);

    // –ü–æ–ª—É—á–∞–µ–º HTML —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    const response = await page.evaluate(async (date) => {
      const url = `https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/?donorform_intervals&reference=109270&date=${date}&time=`;

      try {
        const response = await fetch(url);
        return await response.text();
      } catch (error) {
        return '';
      }
    }, dateString);

    console.log(`–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ${dateString}:`, response.substring(0, 500) + '...');

    // –ü–∞—Ä—Å–∏–º HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    const times = [];
    const timeRegex = /<a[^>]*data-value="(\d{2}:\d{2})"[^>]*>(\d{2}:\d{2})<\/a>\s*<span[^>]*>\((\d+)\)<\/span>/g;
    let match;

    while ((match = timeRegex.exec(response)) !== null) {
      const time = match[1];
      const availableSlots = parseInt(match[3]);

      console.log(`–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: ${time}, —Å–ª–æ—Ç–æ–≤: ${availableSlots}`);

      if (availableSlots > 0) {
        times.push(time);
      }
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–∞—Ä—Å–∏–Ω–≥–∞
    if (times.length === 0) {
      console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–∞—Ä—Å–∏–Ω–≥–∞...');

      const dataValueRegex = /data-value="(\d{2}:\d{2})"/g;
      const countRegex = /\((\d+)\)/g;

      const timeMatches = [...response.matchAll(dataValueRegex)];
      const countMatches = [...response.matchAll(countRegex)];

      console.log(`–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω: ${timeMatches.length}, —Å—á–µ—Ç—á–∏–∫–æ–≤: ${countMatches.length}`);

      for (let i = 0; i < Math.min(timeMatches.length, countMatches.length); i++) {
        const time = timeMatches[i][1];
        const count = parseInt(countMatches[i][1]);

        console.log(`–í—Ä–µ–º—è: ${time}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count}`);

        if (count > 0) {
          times.push(time);
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    times.sort((a, b) => {
      const timeA = a.split(':').map(Number);
      const timeB = b.split(':').map(Number);
      return timeA[0] * 60 + timeA[1] - (timeB[0] * 60 + timeB[1]);
    });

    console.log(`–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è ${dateString}:`, times);
    return times;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
    return [];
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

async function closeModalIfExists(page) {
  try {
    await page.waitForSelector('.donorform-modal', { timeout: 5000 });
    console.log('–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');

    const closeSelectors = [
      '.js-donorform-modal-close',
      '.close',
      '.donorform-modal-firsttime'
    ];

    for (const selector of closeSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible()) {
          await element.click();
          console.log(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑: ${selector}`);
          await page.waitForSelector('.donorform-modal', { state: 'hidden', timeout: 3000 });
          return true;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      }
    }

    await page.keyboard.press('Escape');
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ ESC');
    return true;
  } catch (error) {
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ');
    return false;
  }
}

module.exports = {
  checkAvailability,
  checkAvailabilityFromDate,
  startBooking
};
