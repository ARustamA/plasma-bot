const { checkAvailabilityInternal } = require('../utils/dates');
const { Markup } = require('telegraf');

async function closeModalIfExists(page) {
  try {
    await page.waitForSelector('.donorform-modal', { timeout: 5000 });

    console.log('–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');

    const closeSelectors = [
      '.js-donorform-modal-close',
      '.close',
      '.donorform-modal-firsttime'
    ];

    for (const selector of closeSelectors) {
      try {
        const element = await page.locator(selector).first();
        if (await element.isVisible()) {
          await element.click();
          console.log(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑: ${selector}`);
          await page.waitForSelector('.donorform-modal', { state: 'hidden', timeout: 3000 });
          return true;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      }
    }

    await page.keyboard.press('Escape');
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ ESC');

    return true;
  } catch (error) {
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ');
    return false;
  }
}

async function checkAvailability(ctx) {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç...');

    const availableDates = await checkAvailabilityInternal();

    if (availableDates && availableDates.length > 0) {
      console.log('–ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:', availableDates);

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      const dateButtons = availableDates.map(dateData => [
        Markup.button.callback(
          `üìÖ ${dateData.displayText}`,
          `select_date_${dateData.dateString}`
        )
      ]);

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      dateButtons.push([
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', 'refresh_dates')
      ]);

      await ctx.reply(
        'üéâ *–ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–ª–∞–∑–º—É:*\n\n' +
        'üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:',
        {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: dateButtons }
        }
      );
    } else {
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

      const refreshButton = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', 'refresh_dates')]
      ]);

      await ctx.reply(
        'üòî *–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏*\n\n' +
        'üîç –Ø –ø—Ä–æ–¥–æ–ª–∂—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å.\n' +
        'üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é:',
        {
          parse_mode: 'Markdown',
          ...refreshButton
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);

    const refreshButton = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'refresh_dates')]
    ]);

    if (error.message.includes('net::ERR_EMPTY_RESPONSE') ||
      error.message.includes('ERR_CONNECTION_REFUSED')) {
      await ctx.reply(
        'üåê *–°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n' +
        '‚è∞ –ü–æ–ø—Ä–æ–±—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —á–∞—Å.\n' +
        'üîÑ –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:',
        {
          parse_mode: 'Markdown',
          ...refreshButton
        }
      );
    } else {
      await ctx.reply(
        '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç*\n\n' +
        'üîß –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.\n' +
        '‚è∞ –ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —á–∞—Å:',
        {
          parse_mode: 'Markdown',
          ...refreshButton
        }
      );
    }
  }
}

async function startBooking(ctx) {
  try {
    const selectedDate = ctx.session.selectedDate;
    const date = new Date(selectedDate);
    const { getMonthName } = require('../utils/dates');
    const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

    await ctx.reply(`üîç *–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏*\n\nüìÖ –î–∞—Ç–∞: ${displayDate}\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã...`, {
      parse_mode: 'Markdown'
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    const availableTimes = await getAvailableTimesForDate(selectedDate);

    if (availableTimes.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      const morningTimes = availableTimes.filter(time => {
        const hour = parseInt(time.split(':')[0]);
        return hour >= 8 && hour < 12;
      });

      const afternoonTimes = availableTimes.filter(time => {
        const hour = parseInt(time.split(':')[0]);
        return hour >= 12 && hour < 17;
      });

      const eveningTimes = availableTimes.filter(time => {
        const hour = parseInt(time.split(':')[0]);
        return hour >= 17;
      });

      const timeButtons = [];

      // –î–æ–±–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã
      if (morningTimes.length > 0) {
        morningTimes.forEach(time => {
          timeButtons.push([
            Markup.button.callback(`üåÖ ${time}`, `select_time_${time}`)
          ]);
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
      if (afternoonTimes.length > 0) {
        afternoonTimes.forEach(time => {
          timeButtons.push([
            Markup.button.callback(`‚òÄÔ∏è ${time}`, `select_time_${time}`)
          ]);
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã
      if (eveningTimes.length > 0) {
        eveningTimes.forEach(time => {
          timeButtons.push([
            Markup.button.callback(`üåÜ ${time}`, `select_time_${time}`)
          ]);
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      timeButtons.push([
        Markup.button.callback('üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'back_to_dates'),
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', `refresh_times_${selectedDate}`)
      ]);

      await ctx.reply(
        `‚è∞ *–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ ${displayDate}:*\n\n` +
        `üåÖ –£—Ç—Ä–æ: ${morningTimes.length} —Å–ª–æ—Ç–æ–≤\n` +
        `‚òÄÔ∏è –î–µ–Ω—å: ${afternoonTimes.length} —Å–ª–æ—Ç–æ–≤\n` +
        `üåÜ –í–µ—á–µ—Ä: ${eveningTimes.length} —Å–ª–æ—Ç–æ–≤\n\n` +
        'üëÜ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:',
        {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: timeButtons }
        }
      );
    } else {
      const backButton = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'back_to_dates')],
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', `refresh_times_${selectedDate}`)]
      ]);

      await ctx.reply(
        `üòî *–ù–∞ ${displayDate} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏*\n\n` +
        'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫:',
        {
          parse_mode: 'Markdown',
          ...backButton
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ startBooking:', error);

    const errorButtons = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')],
      [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', `refresh_times_${ctx.session.selectedDate}`)]
    ]);

    await ctx.reply(
      '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏*\n\n' +
      'üîß –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.\n' +
      'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:',
      {
        parse_mode: 'Markdown',
        ...errorButtons
      }
    );
  }
}

async function getAvailableTimesForDate(dateString) {
  const { chromium } = require('playwright');
  let browser;

  try {
    browser = await chromium.launch({ headless: true });
    const page = await browser.newPage();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    await closeModalIfExists(page);
    await page.waitForTimeout(1000);

    // –ü–æ–ª—É—á–∞–µ–º HTML —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    const response = await page.evaluate(async (date) => {
      const url = `https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/?donorform_intervals&reference=109270&date=${date}&time=`;

      try {
        const response = await fetch(url);
        return await response.text();
      } catch (error) {
        return '';
      }
    }, dateString);

    // –ü–∞—Ä—Å–∏–º HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    const times = [];
    const timeRegex = /(\d{2}:\d{2})\s*<span[^>]*>\((\d+)\)<\/span>/g;
    let match;

    while ((match = timeRegex.exec(response)) !== null) {
      const time = match[1];
      const availableSlots = parseInt(match[2]);

      if (availableSlots > 0) {
        times.push(time);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    times.sort((a, b) => {
      const timeA = a.split(':').map(Number);
      const timeB = b.split(':').map(Number);
      return timeA[0] * 60 + timeA[1] - (timeB[0] * 60 + timeB[1]);
    });

    return times;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
    return [];
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

module.exports = { checkAvailability, startBooking };
