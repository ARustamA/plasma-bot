const { canDonatePlasma, getMonthName } = require('../utils/dates');
const { checkAvailability, checkAvailabilityFromDate, startBooking } = require('./booking');
const { bookAppointment } = require('../services/donor-form');
const { requestManualCaptcha } = require('../utils/captcha');
const { Markup } = require('telegraf');
const fs = require('fs');

async function handleDateSelection(ctx, selectedDate) {
  ctx.session.selectedDate = selectedDate;

  const date = new Date(selectedDate);
  const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

  await ctx.editMessageText(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${displayDate}\nüîç –ò—â—É —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è...`);
  await startBooking(ctx);
}

async function handleTimeSelection(ctx, selectedTime) {
  ctx.session.selectedTime = selectedTime;

  const date = new Date(ctx.session.selectedDate);
  const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

  await ctx.editMessageText(
    `‚úÖ –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: ${selectedTime}\nüìÖ –î–∞—Ç–∞: ${displayDate}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–∞, –∑–∞–ø–∏—Å–∞—Ç—å', 'confirm_booking_yes')],
      [Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', 'confirm_booking_no')]
    ])
  );
}

async function handleBookingConfirmation(ctx, confirmation) {
  if (confirmation === 'yes') {
    await ctx.editMessageText('üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...');
    await bookAppointment(ctx, requestManualCaptcha);
  } else {
    await ctx.editMessageText('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –Ø –ø—Ä–æ–¥–æ–ª–∂—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –¥–∞—Ç—ã.');
  }
}

async function handleDateRefresh(ctx) {
  try {
    const canDonate = canDonatePlasma(ctx.session.lastDonationDate, ctx.session.donationType);

    if (canDonate) {
      await checkAvailability(ctx);
    } else {
      const lastDate = new Date(ctx.session.lastDonationDate);
      const waitDays = ctx.session.donationType === 'blood' ? 30 : 14;
      const nextPossibleDate = new Date(lastDate.getTime() + waitDays * 24 * 60 * 60 * 1000);
      await checkAvailabilityFromDate(ctx, nextPossibleDate);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç:', error);
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'refresh_dates' }
          ]]
        }
      }
    );
  }
}

async function handleTimeRefresh(ctx, selectedDate) {
  ctx.session.selectedDate = selectedDate;
  await ctx.editMessageText('üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è...');

  try {
    await startBooking(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `refresh_times_${selectedDate}` },
              { text: 'üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', callback_data: 'back_to_dates' }
            ]
          ]
        }
      }
    );
  }
}

async function handleCaptchaCancel(ctx) {
  const userId = ctx.from.id;

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
  const { closeBrowserSafely } = require('./services/donor-form');
  await closeBrowserSafely(userId);

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ø—á–∏
  ctx.session.state = 'ready';
  delete ctx.session.manualCaptchaText;
  delete ctx.session.pageReady;

  // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–ø—á–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (ctx.session.currentCaptchaPath && fs.existsSync(ctx.session.currentCaptchaPath)) {
    try {
      fs.unlinkSync(ctx.session.currentCaptchaPath);
      console.log('üóëÔ∏è –§–∞–π–ª –∫–∞–ø—á–∏ —É–¥–∞–ª–µ–Ω:', ctx.session.currentCaptchaPath);
    } catch (e) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–∞–ø—á–∏:', e.message);
    }
    delete ctx.session.currentCaptchaPath;
  }

  await ctx.editMessageText(
    '‚ùå *–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n' +
    'üí° –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏.',
    {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
      ])
    }
  );
}

module.exports = {
  handleDateSelection,
  handleTimeSelection,
  handleBookingConfirmation,
  handleDateRefresh,
  handleTimeRefresh,
  handleCaptchaCancel
};
