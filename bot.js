const { Telegraf } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const debug = require('debug')('bot');

// –ú–æ–¥—É–ª–∏
const { BOT_TOKEN } = require('./config');
const { handleStartCommand, handleStartCheckCommand, handleStopCheckCommand, handleStatusCommand } = require('./handlers/commands');
const { handleDonationType, handleUserDataInput } = require('./handlers/userRegistration');
const { handleCaptchaInput, handleTestCaptchaCommand, handleTestCaptchaInput } = require('./handlers/captcha');
const { handleDateSelection, handleTimeSelection, handleBookingConfirmation, handleDateRefresh, handleTimeRefresh, handleCaptchaCancel } = require('./handlers/navigation');
const PeriodicCheckService = require('./services/periodicCheck');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);
bot.use(new LocalSession({ database: 'sessions.json' }).middleware());

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
const periodicCheckService = new PeriodicCheckService(bot);

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ ===
bot.telegram.setMyCommands([
  { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: '/startcheck', description: '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç' },
  { command: '/stopcheck', description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç' },
  { command: '/status', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏' },
  { command: '/testcaptcha', description: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –∫–∞–ø—á–∏' }
]);

// === –ö–æ–º–∞–Ω–¥—ã ===
bot.command('start', (ctx) => handleStartCommand(ctx, () => periodicCheckService.start()));
bot.command('startcheck', (ctx) => handleStartCheckCommand(ctx, () => periodicCheckService.start()));
bot.command('stopcheck', (ctx) => handleStopCheckCommand(ctx, () => periodicCheckService.stop()));
bot.command('status', handleStatusCommand);
bot.command('testcaptcha', handleTestCaptchaCommand);

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ===
bot.action(/donation_type_(.*)/, (ctx) => handleDonationType(ctx, ctx.match[1]));
bot.action(/select_date_(.*)/, (ctx) => handleDateSelection(ctx, ctx.match[1]));
bot.action(/select_time_(.*)/, (ctx) => handleTimeSelection(ctx, ctx.match[1]));
bot.action(/confirm_booking_(.*)/, (ctx) => handleBookingConfirmation(ctx, ctx.match[1]));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
bot.action('refresh_dates', (ctx) => {
  ctx.editMessageText('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç...');
  handleDateRefresh(ctx);
});

bot.action('back_to_dates', (ctx) => {
  ctx.editMessageText('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã...');
  handleDateRefresh(ctx);
});

bot.action(/refresh_times_(.*)/, (ctx) => handleTimeRefresh(ctx, ctx.match[1]));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
bot.action('time_period_morning', (ctx) => ctx.answerCbQuery('üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è (8:00-12:00)'));
bot.action('time_period_afternoon', (ctx) => ctx.answerCbQuery('‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è (12:00-17:00)'));
bot.action('time_period_evening', (ctx) => ctx.answerCbQuery('üåÜ –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è (17:00-20:00)'));

bot.action('cancel_captcha', handleCaptchaCancel);

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  const state = ctx.session.state;

  try {
    if (state === 'waiting_captcha_input') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
      await handleCaptchaInput(ctx, text);
    } else if (state === 'testing_captcha') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
      await handleTestCaptchaInput(ctx, text);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await handleUserDataInput(ctx, text, state);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  if (ctx) {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(console.error);
  }
});

// === –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ ===
module.exports = { bot, periodicCheckService };

bot.launch();
debug('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.');
