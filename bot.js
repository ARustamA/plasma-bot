const { Telegraf, Markup } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const path = require('path');
const debug = require('debug')('bot');
const fs = require('fs');

// –ú–æ–¥—É–ª–∏
const { BOT_TOKEN } = require('./config');
const { canDonatePlasma, getMonthName } = require('./utils/dates');
const { checkAvailability, startBooking } = require('./handlers/booking');
const { bookAppointment } = require('./services/donor-form');
const { requestManualCaptcha } = require('./utils/captcha');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);
bot.use(new LocalSession({ database: 'sessions.json' }).middleware());

let intervalId = null;

// === –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===

bot.command('startcheck', (ctx) => {
  if (!ctx.session.checkingEnabled) {
    ctx.session.checkingEnabled = true;
    startPeriodicCheck();
    ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞.');
  } else {
    ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
  }
});

bot.command('stopcheck', (ctx) => {
  stopPeriodicCheck();
  ctx.session.checkingEnabled = false;
  ctx.reply('–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
});

bot.command('status', (ctx) => {
  const status = ctx.session.checkingEnabled !== false ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
  ctx.reply(`–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${status}.`);
});

bot.telegram.setMyCommands([
  { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: '/startcheck', description: '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç' },
  { command: '/stopcheck', description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç' },
  { command: '/status', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏' },
  { command: '/testcaptcha', description: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–∞–ø—á–∏' }
]);

// === –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
bot.start(async (ctx) => {
  try {
    console.log('–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞');
    console.log('–°–µ—Å—Å–∏—è:', ctx.session);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!ctx.session) {
      ctx.session = {};
    }

    if (!ctx.session.lastDonationDate || !ctx.session.donationType) {
      ctx.session.state = 'ask_donation_type';
      await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:');
      await ctx.reply('–ß—Ç–æ –≤—ã —Å–¥–∞–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑?',
        Markup.inlineKeyboard([
          [Markup.button.callback('ü©∏ –ö—Ä–æ–≤—å', 'donation_type_blood')],
          [Markup.button.callback('üß™ –ü–ª–∞–∑–º–∞', 'donation_type_plasma')]
        ])
      );
      return;
    }

    const canDonate = canDonatePlasma(ctx.session.lastDonationDate, ctx.session.donationType);

    if (!canDonate) {
      const lastDate = new Date(ctx.session.lastDonationDate);
      const waitDays = ctx.session.donationType === 'blood' ? 30 : 14;
      const nextPossibleDate = new Date(lastDate.getTime() + waitDays * 24 * 60 * 60 * 1000);
      await ctx.reply(`–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞–∑–º—É –Ω–µ —Ä–∞–Ω—å—à–µ ${nextPossibleDate.toLocaleDateString()}.`);
      return;
    }

    if (ctx.session.checkingEnabled !== false) {
      ctx.session.checkingEnabled = true;
      startPeriodicCheck();
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try {
      await checkAvailability(ctx);
    } catch (checkError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', checkError);
      await ctx.reply('üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã. –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–Ω–∞—Ü–∏–∏
bot.action(/donation_type_(.*)/, async (ctx) => {
  const donationType = ctx.match[1];
  ctx.session.donationType = donationType;
  ctx.session.state = 'ask_last_donation_date';

  const typeText = donationType === 'blood' ? '–∫—Ä–æ–≤—å' : '–ø–ª–∞–∑–º—É';
  await ctx.editMessageText(`‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${typeText}\n\n–ö–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–∞—á–∞? (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)`);
});

bot.action(/select_date_(.*)/, async (ctx) => {
  const selectedDate = ctx.match[1];
  ctx.session.selectedDate = selectedDate;

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const date = new Date(selectedDate);
  const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

  await ctx.editMessageText(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${displayDate}\nüîç –ò—â—É —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è...`);
  await startBooking(ctx);
});

bot.action(/select_time_(.*)/, async (ctx) => {
  const selectedTime = ctx.match[1];
  ctx.session.selectedTime = selectedTime;

  const date = new Date(ctx.session.selectedDate);
  const displayDate = `${date.getDate()} ${getMonthName(date.getMonth())}`;

  await ctx.editMessageText(`‚úÖ –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: ${selectedTime}\nüìÖ –î–∞—Ç–∞: ${displayDate}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–∞, –∑–∞–ø–∏—Å–∞—Ç—å', 'confirm_booking_yes')],
      [Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', 'confirm_booking_no')]
    ])
  );
});
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ bot.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ø—á–∏
bot.command('testcaptcha', async (ctx) => {
  await ctx.reply('üîç –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–∞–ø—á–∏...');

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é testCaptchaFromBot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    const recognizedText = await testCaptchaFromBot();

    if (recognizedText && recognizedText.length > 0) {
      await ctx.reply(`‚úÖ –ö–∞–ø—á–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: "${recognizedText}"`);
    } else {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–ø—á—É');
    }

    // –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–∞–ø—á–∏
    const { chromium } = require('playwright');
    let browser;

    browser = await chromium.launch({ headless: true });
    const page = await browser.newPage();

    await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    try {
      await page.waitForSelector('.donorform-modal', { timeout: 5000 });
      await page.click('.js-donorform-modal-close');
      await page.waitForTimeout(1000);
    } catch (e) {
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø—á—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    await page.waitForSelector('.captcha_item img', { timeout: 10000 });
    const captchaElement = await page.locator('.captcha_item img').first();

    const testDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(testDir)) {
      fs.mkdirSync(testDir, { recursive: true });
    }

    const captchaPath = path.join(testDir, `test_captcha_${Date.now()}.png`);
    await captchaElement.screenshot({ path: captchaPath });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    await ctx.reply('üì∑ –¢–µ—Å—Ç–∏—Ä—É—é —Ç–∞–∫–∂–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–∞–ø—á–∏:');
    await requestManualCaptcha(ctx, captchaPath);

    await browser.close();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ø—á–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–ø—á–∏');
  }
});

async function testCaptchaFromBot() {
  const { chromium } = require('playwright');
  const sharp = require('sharp');
  const Tesseract = require('tesseract.js');

  let browser;

  try {
    browser = await chromium.launch({ headless: true });
    const page = await browser.newPage();

    await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    try {
      await page.waitForSelector('.donorform-modal', { timeout: 5000 });
      await page.click('.js-donorform-modal-close');
      await page.waitForTimeout(1000);
    } catch (e) {
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    await page.waitForSelector('.captcha_item img', { timeout: 10000 });

    const captchaElement = await page.locator('.captcha_item img').first();
    const captchaPath = path.join(__dirname, 'temp', `test_captcha_${Date.now()}.png`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const tempDir = path.dirname(captchaPath);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    await captchaElement.screenshot({ path: captchaPath });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    const processedPath = captchaPath.replace('.png', '_processed.png');
    await sharp(captchaPath)
      .greyscale()
      .threshold(128)
      .resize(200, 80)
      .png()
      .toFile(processedPath);

    // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–∞–ø—á–∏
    const { data: { text, confidence } } = await Tesseract.recognize(processedPath, 'eng', {
      logger: m => console.log(m) // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    });

    const cleanText = text.replace(/[^a-zA-Z0-9]/g, '').trim();

    console.log(`–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${cleanText}", —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence}%`);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (fs.existsSync(captchaPath)) fs.unlinkSync(captchaPath);
    if (fs.existsSync(processedPath)) fs.unlinkSync(processedPath);

    return cleanText;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∫–∞–ø—á–∏:', error);
    return null;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏
bot.action('cancel_captcha', async (ctx) => {
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ø—á–∏
  ctx.session.state = 'ready';
  delete ctx.session.manualCaptchaText;

  // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–ø—á–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (ctx.session.currentCaptchaPath && fs.existsSync(ctx.session.currentCaptchaPath)) {
    fs.unlinkSync(ctx.session.currentCaptchaPath);
    delete ctx.session.currentCaptchaPath;
  }

  await ctx.editMessageText(
    '‚ùå *–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n' +
    'üí° –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏.',
    {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
      ])
    }
  );
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
bot.action(/confirm_booking_(.*)/, async (ctx) => {
  const confirmation = ctx.match[1];

  if (confirmation === 'yes') {
    await ctx.editMessageText('üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...');
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é requestManualCaptcha –≤ bookAppointment
    await bookAppointment(ctx, requestManualCaptcha);
  } else {
    await ctx.editMessageText('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –Ø –ø—Ä–æ–¥–æ–ª–∂—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –¥–∞—Ç—ã.');
  }
});

// === –û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===

bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  const state = ctx.session.state;

  // –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ö–ê–ü–ß–ò
  if (state === 'waiting_captcha_input') {
    const captchaText = text.trim();

    if (captchaText.length < 3) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:');
      return;
    }

    ctx.session.manualCaptchaText = captchaText;
    ctx.session.state = 'captcha_received';

    await ctx.reply(`‚úÖ –ö–∞–ø—á–∞ –ø–æ–ª—É—á–µ–Ω–∞: "${captchaText}"\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º—É...`);

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–ø—á–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (ctx.session.currentCaptchaPath && fs.existsSync(ctx.session.currentCaptchaPath)) {
      fs.unlinkSync(ctx.session.currentCaptchaPath);
      delete ctx.session.currentCaptchaPath;
    }

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π
    await bookAppointment(ctx, requestManualCaptcha);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (state === 'ask_last_donation_date') {
    const match = text.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
    if (match) {
      const [_, day, month, year] = match;
      const dateStr = `${year}-${month}-${day}`;
      const date = new Date(dateStr);
      if (!isNaN(date.getTime())) {
        ctx.session.lastDonationDate = dateStr;
        ctx.session.state = 'ask_name';
        await ctx.reply('‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
      } else {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
      }
    } else {
      await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024');
    }
  } else if (ctx.session.state === 'ask_name') {
    ctx.session.donorData = ctx.session.donorData || {};
    ctx.session.donorData.name = text;
    ctx.session.state = 'ask_phone';
    await ctx.reply('‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
  } else if (ctx.session.state === 'ask_phone') {
    ctx.session.donorData.phone = text;
    ctx.session.state = 'ask_email';
    await ctx.reply('‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
  } else if (ctx.session.state === 'ask_email') {
    ctx.session.donorData.email = text;
    ctx.session.state = 'ask_birth_date';
    await ctx.reply('‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):');
  } else if (ctx.session.state === 'ask_birth_date') {
    const match = text.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
    if (match) {
      const [_, day, month, year] = match;
      ctx.session.donorData.birthDate = `${year}-${month}-${day}`;
      ctx.session.state = 'ask_snils';
      await ctx.reply('‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ù–ò–õ–°:');
    } else {
      await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –î–î.–ú–ú.–ì–ì–ì–ì');
    }
  } else if (ctx.session.state === 'ask_snils') {
    ctx.session.donorData.snils = text;
    ctx.session.state = 'ready';

    const nextPossibleDate = new Date(ctx.session.lastDonationDate);
    if (ctx.session.donationType === 'blood') {
      nextPossibleDate.setDate(nextPossibleDate.getDate() + 30);
    } else {
      nextPossibleDate.setDate(nextPossibleDate.getDate() + 14);
    }

    await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:
üë§ –§–ò–û: ${ctx.session.donorData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.donorData.phone}
üìß Email: ${ctx.session.donorData.email}

ü©∏ –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Å–¥–∞–≤–∞—Ç—å –ø–ª–∞–∑–º—É –ø–æ—Å–ª–µ ${nextPossibleDate.toLocaleDateString()}.
üîç –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å!`);

    await checkAvailability(ctx);
  } else {
    await ctx.reply('‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ.');
  }
});

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ bot.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ø—á–∏
bot.command('testcaptcha', async (ctx) => {
  await ctx.reply('üîç –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–ø—á–∏...');

  try {
    const { chromium } = require('playwright');
    let browser;

    browser = await chromium.launch({ headless: true });
    const page = await browser.newPage();

    await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    try {
      await page.waitForSelector('.donorform-modal', { timeout: 5000 });
      await page.click('.js-donorform-modal-close');
      await page.waitForTimeout(1000);
    } catch (e) {
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø—á—É
    await page.waitForSelector('.captcha_item img', { timeout: 10000 });
    const captchaElement = await page.locator('.captcha_item img').first();

    const testDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(testDir)) {
      fs.mkdirSync(testDir, { recursive: true });
    }

    const captchaPath = path.join(testDir, `test_captcha_${Date.now()}.png`);
    await captchaElement.screenshot({ path: captchaPath });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await requestManualCaptcha(ctx, captchaPath);

    await browser.close();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ø—á–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–ø—á–∏');
  }
});

// async function testCaptchaFromBot() {
//   const { chromium } = require('playwright');
//   const sharp = require('sharp');
//   const Tesseract = require('tesseract.js');

//   let browser;

//   try {
//     browser = await chromium.launch({ headless: true });
//     const page = await browser.newPage();

//     await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');
//     await page.waitForSelector('.captcha_item img', { timeout: 10000 });

//     const captchaElement = await page.locator('.captcha_item img').first();
//     const captchaPath = path.join(__dirname, 'temp', `test_captcha_${Date.now()}.png`);

//     // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
//     const tempDir = path.dirname(captchaPath);
//     if (!fs.existsSync(tempDir)) {
//       fs.mkdirSync(tempDir, { recursive: true });
//     }

//     await captchaElement.screenshot({ path: captchaPath });

//     // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
//     const processedPath = captchaPath.replace('.png', '_processed.png');
//     await sharp(captchaPath)
//       .greyscale()
//       .threshold(128)
//       .resize(200, 80)
//       .png()
//       .toFile(processedPath);

//     // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º
//     const { data: { text, confidence } } = await Tesseract.recognize(processedPath, 'eng');
//     const cleanText = text.replace(/[^a-zA-Z0-9]/g, '').trim();

//     console.log(`–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${cleanText}", —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence}%`);

//     // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
//     if (fs.existsSync(captchaPath)) fs.unlinkSync(captchaPath);
//     if (fs.existsSync(processedPath)) fs.unlinkSync(processedPath);

//     return cleanText;

//   } finally {
//     if (browser) {
//       await browser.close();
//     }
//   }
// }

// === –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç ===

function startPeriodicCheck() {
  if (intervalId) return;

  intervalId = setInterval(async () => {
    const chatId = process.env.TELEGRAM_USER_ID;
    const context = { chat: { id: chatId }, session: {} };
    try {
      await checkAvailability(context);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', e);
    }
  }, 60 * 60 * 1000); // –†–∞–∑ –≤ —á–∞—Å
}

function stopPeriodicCheck() {
  if (intervalId) {
    clearInterval(intervalId);
    intervalId = null;
  }
}

bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  if (ctx) {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(console.error);
  }
});

// === –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö ===
module.exports = { requestManualCaptcha };

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===

bot.launch();
debug('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.');
