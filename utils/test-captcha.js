const { chromium } = require('playwright');
const { requestManualCaptcha } = require('./captcha');
const fs = require('fs');
const path = require('path');

async function testManualCaptcha() {
  let browser;

  try {
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–∞–ø—á–∏...');

    browser = await chromium.launch({ headless: false });
    const page = await browser.newPage();

    await page.goto('https://xn--66-6kcadbg3avshsx1aj7aza.xn--p1ai/donorform/');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    try {
      await page.waitForSelector('.donorform-modal', { timeout: 5000 });
      await page.click('.js-donorform-modal-close');
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
      await page.waitForTimeout(1000);
    } catch (e) {
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø—á—É
    await page.waitForSelector('.captcha_item img', { timeout: 10000 });
    const captchaElement = await page.locator('.captcha_item img').first();

    const testDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(testDir)) {
      fs.mkdirSync(testDir, { recursive: true });
    }

    const captchaPath = path.join(testDir, `manual_test_captcha_${Date.now()}.png`);
    await captchaElement.screenshot({ path: captchaPath });

    console.log(`–ö–∞–ø—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${captchaPath}`);
    console.log('–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(captchaPath));

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    const mockCtx = {
      replyWithPhoto: async (photo, options) => {
        console.log('üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ:', photo.source);
        console.log('üìù –ü–æ–¥–ø–∏—Å—å:', options.caption);
        return Promise.resolve();
      },
      reply: async (text) => {
        console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', text);
        return Promise.resolve();
      },
      session: {}
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏
    await requestManualCaptcha(mockCtx, captchaPath);

    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', mockCtx.session);

    await page.waitForTimeout(3000);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testManualCaptcha();
