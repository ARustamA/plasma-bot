const Tesseract = require('tesseract.js');
const sharp = require('sharp');
const fs = require('fs');
const { Markup } = require('telegraf'); // –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç

async function recognizeCaptcha(imagePath) {
  try {
    const sharp = require('sharp');
    const Tesseract = require('tesseract.js');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    const processedImagePath = imagePath.replace('.png', '_processed.png');

    await sharp(imagePath)
      .greyscale()
      .threshold(128)
      .resize(200, 80)
      .png()
      .toFile(processedImagePath);

    // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
    const { data: { text } } = await Tesseract.recognize(processedImagePath, 'eng', {
      logger: m => console.log(m)
    });

    // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const cleanText = text.replace(/[^a-zA-Z0-9]/g, '').trim();

    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (fs.existsSync(processedImagePath)) {
      fs.unlinkSync(processedImagePath);
    }

    return cleanText;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞–ø—á–∏:', error);
    return '';
  }
}

async function cropCaptcha(fullPageImage) {
  try {
    const width = 150;
    const height = 50;
    const x = 300;
    const y = 800;

    return await sharp(fullPageImage)
      .extract({ width, height, left: x, top: y })
      .toBuffer();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –∫–∞–ø—á–∏:', error);
    return null;
  }
}

async function requestManualCaptcha(ctx, captchaImagePath) {
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(captchaImagePath)) {
      throw new Error('–§–∞–π–ª –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    await ctx.replyWithPhoto(
      { source: captchaImagePath },
      {
        caption: 'üî§ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏*\n\n' +
          'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.\n' +
          'üí° –û–±—ã—á–Ω–æ —ç—Ç–æ 4-6 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).',
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'cancel_captcha')]
        ])
      }
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏
    ctx.session.state = 'waiting_captcha_input';

    console.log('–ö–∞–ø—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥...');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏:', error);
    await ctx.reply(
      '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏*\n\n' +
      'üîß –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.\n' +
      'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∑–∂–µ.',
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ö –≤—ã–±–æ—Ä—É –¥–∞—Ç', 'back_to_dates')]
        ])
      }
    );
  }
}

module.exports = { recognizeCaptcha, cropCaptcha, requestManualCaptcha };
