const { Markup } = require('telegraf');
const fs = require('fs');

async function requestManualCaptcha(ctx, captchaImagePath) {
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', captchaImagePath);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏
    ctx.session.state = 'waiting_captcha_input';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.replyWithPhoto(
      { source: captchaImagePath },
      {
        caption: 'üî§ *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏*\n\n' +
          'üí° –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Ç–µ–∫—Å—Ç–æ–º.\n' +
          '‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤!',
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'cancel_captcha')]
        ])
      }
    );

    console.log('–ö–∞–ø—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞...');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏:', error);

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (fs.existsSync(captchaImagePath)) {
      fs.unlinkSync(captchaImagePath);
    }

    throw error;
  }
}

module.exports = {
  requestManualCaptcha
};
